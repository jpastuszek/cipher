#!/usr/bin/env ruby

require 'cli'
require 'haddock'
require 'logger'
require_relative '../lib/cipher'

settings = CLI.new do
	stdin :data
	description "Encrypts or decrypts data on stdin.\nExample usage: cat LICENSE.txt | be bin/cipher -p test --in-block-size 8 | be bin/cipher -d -p test --in-block-size 8"
	option :cipher,
		short: :c,
		description: 'select cipher to use',
		default: 'AES'
	option :key_size,
		short: :k,
		description: 'cipher key size in bits (rounded to multiple of 8)',
		cast: Integer,
		default_label: 'longest preset'
	option :mode,
		short: :m,
		description: 'cipher streaming mode',
		default: 'prefer CBC'
	option :password,
		short: :p,
		description: 'encryption or decryption password',
		default_label: 'auto generated'
	option :initialization_vector,
		short: :i,
		description: 'initialization vector for CBC, CFB, OFB and CTR modes',
		default_label: 'random'
	option :session_key,
		short: :s,
		description: 'session key',
		default_label: 'random'
	option :in_block_size,
		short: :b,
		description: 'input read block size',
		default: 1024*256,
		cast: Integer
	switch :list,
		short: :L,
		description: 'list all cipher, mode and key length combinations'
	switch :list_ciphers,
		short: :C,
		description: 'list ciphers'
	switch :list_key_sizes,
		short: :K,
		description: 'list available key lenghts for selected cipher'
	switch :list_modes,
		short: :M,
		description: 'list available modes for given cipher and key length'
	switch :decrypt,
		short: :d,
		description: 'decrypt data'
	switch :verbose,
		short: :v,
		description: 'print informational messages'
	switch :debug,
		short: :D,
		description: 'print debugging messages'
	switch :no_padding,
		short: :P,
		description: 'do not add/expect padding at the end of encrypted stream'
end.parse! do |settings|
	cipher_selector = CipherSelector.new

	if settings.list
		cipher_selector.flat_list do |cipher, mode, key_size|
			STDERR.puts "%s %s %s" % [cipher, "#{mode.first}#{mode.last == :full_block ? '' : "-#{mode.last}"}", key_size]
		end
		exit
	end

	if settings.list_ciphers
		STDERR.puts cipher_selector.ciphers.sort.join ' '
		exit
	end

	mode_selctor = cipher_selector.cipher(settings.cipher)

	if settings.list_modes
		STDERR.puts mode_selctor.modes.map{|mode, sub_block_size| "#{mode}#{sub_block_size == :full_block ? '' : "-#{sub_block_size}"}"  }.sort.join ' '
		exit
	end

	key_size_selector = 
	if settings.mode =~ /(preferr |)([^-]+)(-(.*)|)/
		prefer = ! $1.empty?
		mode = $2
		sub_block_size = $4 ? $4.to_i : :full_block

		if prefer
			mode_selctor.preferred_mode(mode, sub_block_size)
		else
			mode_selctor.mode(mode, sub_block_size)
		end
	else
		fail 'bad mode format'
	end

	if settings.list_key_sizes
		STDERR.puts key_size_selector.key_sizes.sort{ |a, b|
			next 1 if not a.is_a? Numeric
			next -1 if not b.is_a? Numeric
			a <=> b
		}.join(' ')
		exit
	end

	cipher_selector =
	if settings.key_size
		key_size_selector.key_size(settings.key_size.to_i)
	else
		key_size_selector.longest_key(256)
	end

	block_length = (cipher_selector.block_size.to_f / 8).ceil
	if settings.initialization_vector
		settings.initialization_vector.length == block_length or fail "initialization vector should be #{block_length} characters long"
	end

	key_length = (cipher_selector.key_size.to_f / 8).ceil
	if settings.session_key
		settings.session_key.length == key_length or fail "session key should be #{key_length} characters long"
	end

	if not settings.password and settings.decrypt
		fail 'please provide password with -p option'
	end

	settings.cipher_selector = cipher_selector
end

log = Logger.new(STDERR)
log.formatter = proc do |severity, datetime, progname, msg|
	  "#{settings.decrypt ? 'Decrypter' : 'Encrypter'}: #{severity == "ERROR" ? "Error: " : ''}#{severity == "WARN" ? "Warning: " : ''}#{msg}\n"
end
log.level = Logger::WARN
log.level = Logger::INFO if settings.verbose
log.level = Logger::DEBUG if settings.debug

unless settings.password
	settings.password = Haddock::Password.generate
	log.info "Using password: #{settings.password}"
end

options = {}
options[:log] = log
options[:initialization_vector] = settings.initialization_vector if settings.initialization_vector
options[:session_key] = settings.session_key if settings.session_key
options[:padding] = ! settings.no_padding

begin
	unless settings.decrypt
		IOEncrypter.new(settings.stdin, STDOUT, settings.cipher_selector, settings.password, options)
	else
		IODecrypter.new(settings.stdin, STDOUT, settings.password, options)
	end
rescue => e
	log.error "#{e.message} (#{e.class.name})"
	e.backtrace.each do |line|
		log.debug "#{e.class.name}: #{line}"
	end
end

